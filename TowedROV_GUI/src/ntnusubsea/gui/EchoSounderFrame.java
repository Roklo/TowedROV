/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ntnusubsea.gui;

import java.awt.Color;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Frame to display a graph panel
 *
 * @author Marius Nonsvik
 */
public class EchoSounderFrame extends javax.swing.JFrame implements Runnable, Observer
{

    private Data data;
    private GraphPanel graph;

    /**
     * Creates new form SonarFrame
     *
     * @param data Data containing shared variables
     */
    public EchoSounderFrame(Data data)
    {
        initComponents();
        this.data = data;
        graph = new GraphPanel();
        graph.setSize(jPanel1.getWidth(), jPanel1.getHeight());
        graph.setBackground(Color.BLACK);
        graph.setForeground(Color.WHITE);
        graph.setVisible(true);
        jPanel1.add(graph);
        this.add(jPanel1);
        this.pack();
    }

    /**
     * Draws and displays the graphs
     */
    public void showGraph()
    {
        graph.createAndShowGraph();
    }

    /**
     * |- Not finished -| Refreshes the graphs with the given depth and position
     * of the 2nd graph in the x axis x-axis
     *
     * @param position X position of second graph
     * @param depth Depth of the graphs
     */
    public void refreshGraph(int position, int depth)
    {
        graph.drawGraph(position, depth);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Echo sounder");
        setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel1.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        jMenuItem2.setText("Calibrate");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        String cableLength = (String) JOptionPane.showInputDialog(this, "Enten current cable length (Meters)", "Calibration", JOptionPane.PLAIN_MESSAGE, null, null, "100.000");
        try
        {
            System.out.println(Float.valueOf(cableLength));
        } catch (NumberFormatException | NullPointerException ex)
        {
            System.out.println("Invalid or no input");
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    @Override
    public void run()
    {
        showGraph();
        int depth = 0;
        int xpos = 0;

//        while (true)
//        {
//            for (int i = 0; i <= 10; i++)
//            {
//                depth = depth + i;
//                xpos = xpos + 3;
//                this.refreshGraph(xpos, depth);
//                try
//                {
//                    Thread.sleep(1000);
//                } catch (InterruptedException ex)
//                {
//                    Logger.getLogger(EchoSounderFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//            for (int o = 10; o <= 0; o--)
//            {
//                depth = depth - 0;
//                xpos = xpos + 3;
//                this.refreshGraph(xpos, depth);
//                try
//                {
//                    Thread.sleep(1000);
//                } catch (InterruptedException ex)
//                {
//                    Logger.getLogger(EchoSounderFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg)
    {
        //int depth = Math.round(data.getDepth() * 100);
        // refreshGraph(0, depth);
    }
}
